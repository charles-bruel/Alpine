#pragma kernel CullShader

struct Data
{
	float3 position;
	float yRot;
	float scale;
	uint type;
};

StructuredBuffer<Data> input;
StructuredBuffer<uint> args;
AppendStructuredBuffer<Data> output;
float4x4 camera;

[numthreads(64,1,1)]
void CullShader(uint3 id : SV_DispatchThreadID)
{
	Data data = input[id.x];
	if (id.x < args[0] && data.type == args[1]) {
		float4 temp = { data.position.x, data.position.y, data.position.z, 1 };
		temp = mul(camera, temp);
		float3 final = { temp.x / temp.w, temp.y / temp.w, temp.z / temp.w };
		float4 temp2 = { data.position.x, data.position.y + 40, data.position.z, 1 };
		temp2 = mul(camera, temp2);
		float yTest = temp2.y / temp2.w;

		if (final.x > -1.05 && final.x < 1.05 && yTest > -1.05 && final.y < 1.05 && final.z > 0 && final.z < 1) {
			output.Append(data);
		}
	}
}
